Lecture 1:

Parts of AI Agents:
1. LLM: The reasoning behind our AI agent 
2. Memory: It can be long term or short term 
3. Tools: Different services accessed by different APIs


Lecture 2:

Agentic Frameworks
1. Azure AI agent service: currently designed to be used for single agent both through code and UI 
2. Semantic kernel: Enterprise focused framework 
3. AutoGen: Strong focus on taking the altest agentic research and enabling other researchers and developers to test and experiment with those ideas in code. 

Lecture 3:
What makes a good AI agent?
1. Space: The environment the agent is working in , should focus on connecting events, people and knowledge. An agent should be easily discoverable while being able to 
transition from being in the foreground and background based on the user's needs. 

2. Time: How agent operates over time with user. This is imp because agents can improve over time if we design them well enough

3. Core: This principle is abot embracing uncertainity. Since we are allowing LLMs to create plans and actions on those plans, unceratininty is a key part of agentic design 


Lecture 4:
Use of Tool:
Tasks requested by users sometimes needs external tool sto complete. And the tool design pattern allow LLMs to interact with tools like calculator, FLight API, Function

Lecture 5:
Agentic RAG:
RAG enables LLMs to take a query made from a user and retrieve relevant infromation from the database. That info is then added to the context given to the LLM to provide more relevant responses, 

1. To start on the QUERY side the agent performs an analysis of the query to create a plan of smaller tasks to use the data sources and tools it'll need to answer that query. 

Lecture 6:
System Message Framework
- A place where creators of AI agents can have the most control and impact when working with AI agents
- we want to set clear instructions so that the AI agent performs the actions we want it to. One way to build effective prompts is in a scalable and repeatable way is
using a system message framework
- This starts by creating a system message for generating system messages for other AI agents.
- Building prompts is an iterative process and the system message framework allows you to iterate better by making tweaks to the template generating system messages over time to improve across all your agents.

Lecture 7:
Planning design pattern:
- Breaking down complex tasks into manageable subtasks that can be handled efficiently. This approach allows AI agents to create structured plans, facilitating task completion either by a single agent or multiple specialized agents working collaboratively. 
- The planning design pattern improves the process by enabling each subtask to be assigned to specific agents, validated structurally using tools like Pydantic, and passed downstream for execution or further processing.
- Multi agents handle subtasks simultaneously. Coordination between agents improves overall task execution.
- Data validation via tools like Pydantic ensures structured and reliable agent outputs.
- Structured plans enable downstream processes or agents to handle subtasks seamlessly.

Lecture 8:
Multi Agent system:
Different Patterns:
1. Group Chat: when we want to create a group chat application where multiple agents can communicate with each other
eg team collaboration, customer support, and social networking
2. Handoff: Application where multiple agents wants to hand off tasks to each other. 
eg customer support, task management, and workflow automation
3. Collaborative Filtering: Create an application where multiple agents can collaborate to make recommendations to users


